[
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.models.user",
        "description": "src.models.user",
        "isExtraImport": true,
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "msgspec",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msgspec",
        "description": "msgspec",
        "detail": "msgspec",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "put",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "Litestar",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "litestar",
        "description": "litestar",
        "isExtraImport": true,
        "detail": "litestar",
        "documentation": {}
    },
    {
        "label": "Provide",
        "importPath": "litestar.di",
        "description": "litestar.di",
        "isExtraImport": true,
        "detail": "litestar.di",
        "documentation": {}
    },
    {
        "label": "Parameter",
        "importPath": "litestar.params",
        "description": "litestar.params",
        "isExtraImport": true,
        "detail": "litestar.params",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "litestar.exceptions",
        "description": "litestar.exceptions",
        "isExtraImport": true,
        "detail": "litestar.exceptions",
        "documentation": {}
    },
    {
        "label": "ClientException",
        "importPath": "litestar.exceptions",
        "description": "litestar.exceptions",
        "isExtraImport": true,
        "detail": "litestar.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTP_201_CREATED",
        "importPath": "litestar.status_codes",
        "description": "litestar.status_codes",
        "isExtraImport": true,
        "detail": "litestar.status_codes",
        "documentation": {}
    },
    {
        "label": "HTTP_204_NO_CONTENT",
        "importPath": "litestar.status_codes",
        "description": "litestar.status_codes",
        "isExtraImport": true,
        "detail": "litestar.status_codes",
        "documentation": {}
    },
    {
        "label": "HTTP_409_CONFLICT",
        "importPath": "litestar.status_codes",
        "description": "litestar.status_codes",
        "isExtraImport": true,
        "detail": "litestar.status_codes",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "importPath": "src.repositories.user",
        "description": "src.repositories.user",
        "isExtraImport": true,
        "detail": "src.repositories.user",
        "documentation": {}
    },
    {
        "label": "provide_user_repo",
        "importPath": "src.repositories.user",
        "description": "src.repositories.user",
        "isExtraImport": true,
        "detail": "src.repositories.user",
        "documentation": {}
    },
    {
        "label": "UserCreateDTO",
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "isExtraImport": true,
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserReadDTO",
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "isExtraImport": true,
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserUpdateDTO",
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "isExtraImport": true,
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserListDTO",
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "isExtraImport": true,
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserCreateDTO",
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "isExtraImport": true,
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserUpdateDTO",
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "isExtraImport": true,
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "USER_TAG",
        "importPath": "src.lib.constants",
        "description": "src.lib.constants",
        "isExtraImport": true,
        "detail": "src.lib.constants",
        "documentation": {}
    },
    {
        "label": "HEALTH_TAG",
        "importPath": "src.lib.constants",
        "description": "src.lib.constants",
        "isExtraImport": true,
        "detail": "src.lib.constants",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyAsyncConfig",
        "importPath": "litestar.contrib.sqlalchemy.plugins",
        "description": "litestar.contrib.sqlalchemy.plugins",
        "isExtraImport": true,
        "detail": "litestar.contrib.sqlalchemy.plugins",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyPlugin",
        "importPath": "litestar.contrib.sqlalchemy.plugins",
        "description": "litestar.contrib.sqlalchemy.plugins",
        "isExtraImport": true,
        "detail": "litestar.contrib.sqlalchemy.plugins",
        "documentation": {}
    },
    {
        "label": "AuditColumns",
        "importPath": "advanced_alchemy.base",
        "description": "advanced_alchemy.base",
        "isExtraImport": true,
        "detail": "advanced_alchemy.base",
        "documentation": {}
    },
    {
        "label": "BigIntPrimaryKey",
        "importPath": "advanced_alchemy.base",
        "description": "advanced_alchemy.base",
        "isExtraImport": true,
        "detail": "advanced_alchemy.base",
        "documentation": {}
    },
    {
        "label": "CommonTableAttributes",
        "importPath": "advanced_alchemy.base",
        "description": "advanced_alchemy.base",
        "isExtraImport": true,
        "detail": "advanced_alchemy.base",
        "documentation": {}
    },
    {
        "label": "BigIntBase",
        "importPath": "advanced_alchemy.base",
        "description": "advanced_alchemy.base",
        "isExtraImport": true,
        "detail": "advanced_alchemy.base",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "BIGINT",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyAsyncRepository",
        "importPath": "advanced_alchemy.repository",
        "description": "advanced_alchemy.repository",
        "isExtraImport": true,
        "detail": "advanced_alchemy.repository",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSConfig",
        "importPath": "litestar.config.cors",
        "description": "litestar.config.cors",
        "isExtraImport": true,
        "detail": "litestar.config.cors",
        "documentation": {}
    },
    {
        "label": "OpenAPIConfig",
        "importPath": "litestar.openapi",
        "description": "litestar.openapi",
        "isExtraImport": true,
        "detail": "litestar.openapi",
        "documentation": {}
    },
    {
        "label": "LoggingConfig",
        "importPath": "litestar.logging.config",
        "description": "litestar.logging.config",
        "isExtraImport": true,
        "detail": "litestar.logging.config",
        "documentation": {}
    },
    {
        "label": "UserController",
        "importPath": "src.controllers.user",
        "description": "src.controllers.user",
        "isExtraImport": true,
        "detail": "src.controllers.user",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_plugin",
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "isExtraImport": true,
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "create_database_tables",
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "isExtraImport": true,
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "dispose_engine",
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "isExtraImport": true,
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nif project_root not in sys.path:\n    sys.path.insert(0, project_root)\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = UserBase.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = UserBase.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "UserController",
        "kind": 6,
        "importPath": "src.controllers.user",
        "description": "src.controllers.user",
        "peekOfCode": "class UserController(Controller):\n    path = \"/users\"\n    tags = [USER_TAG]\n    dependencies = {\"user_repo\": Provide(provide_user_repo, sync_to_thread=False)}\n    @post(status_code=HTTP_201_CREATED, summary=\"Создать пользователя\",\n          description=\"Создает новую запись пользователя.\")\n    async def create_user(\n        self,\n        data: UserCreateDTO,\n        user_repo: UserRepository",
        "detail": "src.controllers.user",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "src.controllers.user",
        "description": "src.controllers.user",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\nclass UserController(Controller):\n    path = \"/users\"\n    tags = [USER_TAG]\n    dependencies = {\"user_repo\": Provide(provide_user_repo, sync_to_thread=False)}\n    @post(status_code=HTTP_201_CREATED, summary=\"Создать пользователя\",\n          description=\"Создает новую запись пользователя.\")",
        "detail": "src.controllers.user",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "src.controllers.user",
        "description": "src.controllers.user",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\nclass UserController(Controller):\n    path = \"/users\"\n    tags = [USER_TAG]\n    dependencies = {\"user_repo\": Provide(provide_user_repo, sync_to_thread=False)}\n    @post(status_code=HTTP_201_CREATED, summary=\"Создать пользователя\",\n          description=\"Создает новую запись пользователя.\")\n    async def create_user(\n        self,",
        "detail": "src.controllers.user",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "src.controllers.user",
        "description": "src.controllers.user",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\nclass UserController(Controller):\n    path = \"/users\"\n    tags = [USER_TAG]\n    dependencies = {\"user_repo\": Provide(provide_user_repo, sync_to_thread=False)}\n    @post(status_code=HTTP_201_CREATED, summary=\"Создать пользователя\",",
        "detail": "src.controllers.user",
        "documentation": {}
    },
    {
        "label": "UserCreateDTO",
        "kind": 6,
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "peekOfCode": "class UserCreateDTO(msgspec.Struct, kw_only=True, omit_defaults=True):\n    name: str\n    surname: str\n    password: str\nclass UserUpdateDTO(msgspec.Struct, kw_only=True, omit_defaults=True):\n    name: Optional[str] = None\n    surname: Optional[str] = None\n    password: Optional[str] = None\nclass UserReadDTO(msgspec.Struct, kw_only=True):\n    id: int",
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserUpdateDTO",
        "kind": 6,
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "peekOfCode": "class UserUpdateDTO(msgspec.Struct, kw_only=True, omit_defaults=True):\n    name: Optional[str] = None\n    surname: Optional[str] = None\n    password: Optional[str] = None\nclass UserReadDTO(msgspec.Struct, kw_only=True):\n    id: int\n    name: str\n    surname: str\n    created_at: datetime.datetime\n    updated_at: datetime.datetime",
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserReadDTO",
        "kind": 6,
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "peekOfCode": "class UserReadDTO(msgspec.Struct, kw_only=True):\n    id: int\n    name: str\n    surname: str\n    created_at: datetime.datetime\n    updated_at: datetime.datetime\nclass UserListDTO(msgspec.Struct, kw_only=True):\n    id: int\n    name: str\n    surname: str",
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "UserListDTO",
        "kind": 6,
        "importPath": "src.dtos.user",
        "description": "src.dtos.user",
        "peekOfCode": "class UserListDTO(msgspec.Struct, kw_only=True):\n    id: int\n    name: str\n    surname: str",
        "detail": "src.dtos.user",
        "documentation": {}
    },
    {
        "label": "USER_TAG",
        "kind": 5,
        "importPath": "src.lib.constants",
        "description": "src.lib.constants",
        "peekOfCode": "USER_TAG = \"User Management\"\nHEALTH_TAG = \"Health Check\"",
        "detail": "src.lib.constants",
        "documentation": {}
    },
    {
        "label": "HEALTH_TAG",
        "kind": 5,
        "importPath": "src.lib.constants",
        "description": "src.lib.constants",
        "peekOfCode": "HEALTH_TAG = \"Health Check\"",
        "detail": "src.lib.constants",
        "documentation": {}
    },
    {
        "label": "DB_URL",
        "kind": 5,
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "peekOfCode": "DB_URL = os.getenv(\"DB_URL\", \"postgresql+asyncpg://user:pass@host:port/db\")\nengine = create_async_engine(DB_URL, echo=False) # echo=True для отладки SQL запросов\nsession_maker = async_sessionmaker(engine, expire_on_commit=False)\nsqlalchemy_config = SQLAlchemyAsyncConfig(\n    connection_string=DB_URL,\n    session_maker=session_maker,\n    # dependency_key=\"db_session\", # Ключ для инъекции зависимости (по умолчанию 'db_session')\n)\nsqlalchemy_plugin = SQLAlchemyPlugin(config=sqlalchemy_config)\nasync def get_db_session() -> AsyncGenerator[AsyncSession, None]:",
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "peekOfCode": "engine = create_async_engine(DB_URL, echo=False) # echo=True для отладки SQL запросов\nsession_maker = async_sessionmaker(engine, expire_on_commit=False)\nsqlalchemy_config = SQLAlchemyAsyncConfig(\n    connection_string=DB_URL,\n    session_maker=session_maker,\n    # dependency_key=\"db_session\", # Ключ для инъекции зависимости (по умолчанию 'db_session')\n)\nsqlalchemy_plugin = SQLAlchemyPlugin(config=sqlalchemy_config)\nasync def get_db_session() -> AsyncGenerator[AsyncSession, None]:\n    \"\"\"Генератор для получения асинхронной сессии SQLAlchemy.\"\"\"",
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "session_maker",
        "kind": 5,
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "peekOfCode": "session_maker = async_sessionmaker(engine, expire_on_commit=False)\nsqlalchemy_config = SQLAlchemyAsyncConfig(\n    connection_string=DB_URL,\n    session_maker=session_maker,\n    # dependency_key=\"db_session\", # Ключ для инъекции зависимости (по умолчанию 'db_session')\n)\nsqlalchemy_plugin = SQLAlchemyPlugin(config=sqlalchemy_config)\nasync def get_db_session() -> AsyncGenerator[AsyncSession, None]:\n    \"\"\"Генератор для получения асинхронной сессии SQLAlchemy.\"\"\"\n    async with session_maker() as session:",
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_config",
        "kind": 5,
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "peekOfCode": "sqlalchemy_config = SQLAlchemyAsyncConfig(\n    connection_string=DB_URL,\n    session_maker=session_maker,\n    # dependency_key=\"db_session\", # Ключ для инъекции зависимости (по умолчанию 'db_session')\n)\nsqlalchemy_plugin = SQLAlchemyPlugin(config=sqlalchemy_config)\nasync def get_db_session() -> AsyncGenerator[AsyncSession, None]:\n    \"\"\"Генератор для получения асинхронной сессии SQLAlchemy.\"\"\"\n    async with session_maker() as session:\n        try:",
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_plugin",
        "kind": 5,
        "importPath": "src.lib.db",
        "description": "src.lib.db",
        "peekOfCode": "sqlalchemy_plugin = SQLAlchemyPlugin(config=sqlalchemy_config)\nasync def get_db_session() -> AsyncGenerator[AsyncSession, None]:\n    \"\"\"Генератор для получения асинхронной сессии SQLAlchemy.\"\"\"\n    async with session_maker() as session:\n        try:\n            yield session\n            await session.commit()\n        except Exception:\n            await session.rollback()\n            raise",
        "detail": "src.lib.db",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "src.models.user",
        "description": "src.models.user",
        "peekOfCode": "class UserBase(BigIntBase):\n    \"\"\"Базовая модель SQLAlchemy для таблицы user с BIGINT ID.\"\"\"\n    id: Mapped[int] = mapped_column(BIGINT, primary_key=True, autoincrement=True)\n    __abstract__ = True\nclass User(UserBase):\n    \"\"\"Модель пользователя.\"\"\"\n    __tablename__ = \"users\"\n    name: Mapped[str] = mapped_column(String(100))\n    surname: Mapped[str] = mapped_column(String(100))\n    password: Mapped[str] = mapped_column(String(255))",
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.models.user",
        "description": "src.models.user",
        "peekOfCode": "class User(UserBase):\n    \"\"\"Модель пользователя.\"\"\"\n    __tablename__ = \"users\"\n    name: Mapped[str] = mapped_column(String(100))\n    surname: Mapped[str] = mapped_column(String(100))\n    password: Mapped[str] = mapped_column(String(255))\n    created_at: Mapped[datetime.datetime] = mapped_column(\n        TIMESTAMP(timezone=True),\n        nullable=False,\n        server_default=func.now()",
        "detail": "src.models.user",
        "documentation": {}
    },
    {
        "label": "UserRepository",
        "kind": 6,
        "importPath": "src.repositories.user",
        "description": "src.repositories.user",
        "peekOfCode": "class UserRepository(SQLAlchemyAsyncRepository[User]):\n    \"\"\"Репозиторий для операций с пользователями.\"\"\"\n    model_type = User\ndef provide_user_repo(db_session: AsyncSession) -> UserRepository:\n    \"\"\"Предоставляет экземпляр UserRepository с активной сессией.\"\"\"\n    return UserRepository(session=db_session)",
        "detail": "src.repositories.user",
        "documentation": {}
    },
    {
        "label": "provide_user_repo",
        "kind": 2,
        "importPath": "src.repositories.user",
        "description": "src.repositories.user",
        "peekOfCode": "def provide_user_repo(db_session: AsyncSession) -> UserRepository:\n    \"\"\"Предоставляет экземпляр UserRepository с активной сессией.\"\"\"\n    return UserRepository(session=db_session)",
        "detail": "src.repositories.user",
        "documentation": {}
    },
    {
        "label": "run_server",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def run_server():\n    \"\"\"Запускает ASGI сервер с помощью uvicorn.\"\"\"\n    host = os.getenv(\"APP_HOST\", \"127.0.0.1\")\n    port = int(os.getenv(\"APP_PORT\", \"8000\"))\n    reload = bool(os.getenv(\"APP_RELOAD\", \"False\").lower() == 'true')\n    uvicorn.run(\n        \"src.app:app\",\n        host=host,\n        port=port,\n        reload=reload,   # Включаем автоперезагрузку при изменениях кода (для разработки)",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "cors_config",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "cors_config = CORSConfig(allow_origins=[\"*\"])\nopenapi_config = OpenAPIConfig(\n    title=\"LiteStar CRUD API\",\n    version=\"1.0.0\",\n    description=\"Простое API для управления пользователями с использованием LiteStar, SQLAlchemy и PostgreSQL.\",\n    contact={\"name\": \"API Developer\", \"email\": \"lukmanov.nikia06@mail.ru\", \"tg\": \"@Rerotsu\"},\n)\nlog_config = LoggingConfig(\n    loggers={\n        \"myapp\": {",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "openapi_config",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "openapi_config = OpenAPIConfig(\n    title=\"LiteStar CRUD API\",\n    version=\"1.0.0\",\n    description=\"Простое API для управления пользователями с использованием LiteStar, SQLAlchemy и PostgreSQL.\",\n    contact={\"name\": \"API Developer\", \"email\": \"lukmanov.nikia06@mail.ru\", \"tg\": \"@Rerotsu\"},\n)\nlog_config = LoggingConfig(\n    loggers={\n        \"myapp\": {\n            \"level\": \"INFO\",",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "log_config",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "log_config = LoggingConfig(\n    loggers={\n        \"myapp\": {\n            \"level\": \"INFO\",\n            \"handlers\": [\"console\"],\n        }\n    }\n)\nasync def on_startup() -> None:\n    \"\"\"Выполняется при старте приложения.\"\"\"",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app = Litestar(\n    route_handlers=[UserController, health_check],\n    plugins=[sqlalchemy_plugin],\n    openapi_config=openapi_config,\n    cors_config=cors_config,\n    logging_config=log_config,\n    on_startup=[on_startup],\n    on_shutdown=[on_shutdown],\n    debug=bool(os.getenv(\"APP_DEBUG\", \"False\").lower() == 'true'),  # Включаем режим отладки из .env\n    # middleware=[...] # Можно добавить middleware",
        "detail": "src.app",
        "documentation": {}
    }
]